// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Zone is an object representing the database table.
type Zone struct {
	ZoneID       int    `boil:"zone_id" json:"zone_id" toml:"zone_id" yaml:"zone_id"`
	Name         string `boil:"name" json:"name" toml:"name" yaml:"name"`
	ResourceName string `boil:"resource_name" json:"resource_name" toml:"resource_name" yaml:"resource_name"`
	OrgID        int    `boil:"org_id" json:"org_id" toml:"org_id" yaml:"org_id"`

	R *zoneR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L zoneL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ZoneColumns = struct {
	ZoneID       string
	Name         string
	ResourceName string
	OrgID        string
}{
	ZoneID:       "zone_id",
	Name:         "name",
	ResourceName: "resource_name",
	OrgID:        "org_id",
}

var ZoneTableColumns = struct {
	ZoneID       string
	Name         string
	ResourceName string
	OrgID        string
}{
	ZoneID:       "zone.zone_id",
	Name:         "zone.name",
	ResourceName: "zone.resource_name",
	OrgID:        "zone.org_id",
}

// Generated where

var ZoneWhere = struct {
	ZoneID       whereHelperint
	Name         whereHelperstring
	ResourceName whereHelperstring
	OrgID        whereHelperint
}{
	ZoneID:       whereHelperint{field: "\"zone\".\"zone_id\""},
	Name:         whereHelperstring{field: "\"zone\".\"name\""},
	ResourceName: whereHelperstring{field: "\"zone\".\"resource_name\""},
	OrgID:        whereHelperint{field: "\"zone\".\"org_id\""},
}

// ZoneRels is where relationship names are stored.
var ZoneRels = struct {
	Org string
}{
	Org: "Org",
}

// zoneR is where relationships are stored.
type zoneR struct {
	Org *Org `boil:"Org" json:"Org" toml:"Org" yaml:"Org"`
}

// NewStruct creates a new relationship struct
func (*zoneR) NewStruct() *zoneR {
	return &zoneR{}
}

// zoneL is where Load methods for each relationship are stored.
type zoneL struct{}

var (
	zoneAllColumns            = []string{"zone_id", "name", "resource_name", "org_id"}
	zoneColumnsWithoutDefault = []string{"name", "resource_name", "org_id"}
	zoneColumnsWithDefault    = []string{"zone_id"}
	zonePrimaryKeyColumns     = []string{"zone_id"}
)

type (
	// ZoneSlice is an alias for a slice of pointers to Zone.
	// This should almost always be used instead of []Zone.
	ZoneSlice []*Zone
	// ZoneHook is the signature for custom Zone hook methods
	ZoneHook func(context.Context, boil.ContextExecutor, *Zone) error

	zoneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	zoneType                 = reflect.TypeOf(&Zone{})
	zoneMapping              = queries.MakeStructMapping(zoneType)
	zonePrimaryKeyMapping, _ = queries.BindMapping(zoneType, zoneMapping, zonePrimaryKeyColumns)
	zoneInsertCacheMut       sync.RWMutex
	zoneInsertCache          = make(map[string]insertCache)
	zoneUpdateCacheMut       sync.RWMutex
	zoneUpdateCache          = make(map[string]updateCache)
	zoneUpsertCacheMut       sync.RWMutex
	zoneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var zoneBeforeInsertHooks []ZoneHook
var zoneBeforeUpdateHooks []ZoneHook
var zoneBeforeDeleteHooks []ZoneHook
var zoneBeforeUpsertHooks []ZoneHook

var zoneAfterInsertHooks []ZoneHook
var zoneAfterSelectHooks []ZoneHook
var zoneAfterUpdateHooks []ZoneHook
var zoneAfterDeleteHooks []ZoneHook
var zoneAfterUpsertHooks []ZoneHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Zone) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zoneBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Zone) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zoneBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Zone) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zoneBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Zone) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zoneBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Zone) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zoneAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Zone) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zoneAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Zone) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zoneAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Zone) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zoneAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Zone) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range zoneAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddZoneHook registers your hook function for all future operations.
func AddZoneHook(hookPoint boil.HookPoint, zoneHook ZoneHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		zoneBeforeInsertHooks = append(zoneBeforeInsertHooks, zoneHook)
	case boil.BeforeUpdateHook:
		zoneBeforeUpdateHooks = append(zoneBeforeUpdateHooks, zoneHook)
	case boil.BeforeDeleteHook:
		zoneBeforeDeleteHooks = append(zoneBeforeDeleteHooks, zoneHook)
	case boil.BeforeUpsertHook:
		zoneBeforeUpsertHooks = append(zoneBeforeUpsertHooks, zoneHook)
	case boil.AfterInsertHook:
		zoneAfterInsertHooks = append(zoneAfterInsertHooks, zoneHook)
	case boil.AfterSelectHook:
		zoneAfterSelectHooks = append(zoneAfterSelectHooks, zoneHook)
	case boil.AfterUpdateHook:
		zoneAfterUpdateHooks = append(zoneAfterUpdateHooks, zoneHook)
	case boil.AfterDeleteHook:
		zoneAfterDeleteHooks = append(zoneAfterDeleteHooks, zoneHook)
	case boil.AfterUpsertHook:
		zoneAfterUpsertHooks = append(zoneAfterUpsertHooks, zoneHook)
	}
}

// One returns a single zone record from the query.
func (q zoneQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Zone, error) {
	o := &Zone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for zone")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Zone records from the query.
func (q zoneQuery) All(ctx context.Context, exec boil.ContextExecutor) (ZoneSlice, error) {
	var o []*Zone

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Zone slice")
	}

	if len(zoneAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Zone records in the query.
func (q zoneQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count zone rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q zoneQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if zone exists")
	}

	return count > 0, nil
}

// Org pointed to by the foreign key.
func (o *Zone) Org(mods ...qm.QueryMod) orgQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"org_id\" = ?", o.OrgID),
	}

	queryMods = append(queryMods, mods...)

	query := Orgs(queryMods...)
	queries.SetFrom(query.Query, "\"org\"")

	return query
}

// LoadOrg allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (zoneL) LoadOrg(ctx context.Context, e boil.ContextExecutor, singular bool, maybeZone interface{}, mods queries.Applicator) error {
	var slice []*Zone
	var object *Zone

	if singular {
		object = maybeZone.(*Zone)
	} else {
		slice = *maybeZone.(*[]*Zone)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &zoneR{}
		}
		args = append(args, object.OrgID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &zoneR{}
			}

			for _, a := range args {
				if a == obj.OrgID {
					continue Outer
				}
			}

			args = append(args, obj.OrgID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`org`),
		qm.WhereIn(`org.org_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Org")
	}

	var resultSlice []*Org
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Org")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for org")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for org")
	}

	if len(zoneAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Org = foreign
		if foreign.R == nil {
			foreign.R = &orgR{}
		}
		foreign.R.Zones = append(foreign.R.Zones, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrgID == foreign.OrgID {
				local.R.Org = foreign
				if foreign.R == nil {
					foreign.R = &orgR{}
				}
				foreign.R.Zones = append(foreign.R.Zones, local)
				break
			}
		}
	}

	return nil
}

// SetOrg of the zone to the related item.
// Sets o.R.Org to related.
// Adds o to related.R.Zones.
func (o *Zone) SetOrg(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Org) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"zone\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"org_id"}),
		strmangle.WhereClause("\"", "\"", 2, zonePrimaryKeyColumns),
	)
	values := []interface{}{related.OrgID, o.ZoneID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrgID = related.OrgID
	if o.R == nil {
		o.R = &zoneR{
			Org: related,
		}
	} else {
		o.R.Org = related
	}

	if related.R == nil {
		related.R = &orgR{
			Zones: ZoneSlice{o},
		}
	} else {
		related.R.Zones = append(related.R.Zones, o)
	}

	return nil
}

// Zones retrieves all the records using an executor.
func Zones(mods ...qm.QueryMod) zoneQuery {
	mods = append(mods, qm.From("\"zone\""))
	return zoneQuery{NewQuery(mods...)}
}

// FindZone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindZone(ctx context.Context, exec boil.ContextExecutor, zoneID int, selectCols ...string) (*Zone, error) {
	zoneObj := &Zone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"zone\" where \"zone_id\"=$1", sel,
	)

	q := queries.Raw(query, zoneID)

	err := q.Bind(ctx, exec, zoneObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from zone")
	}

	if err = zoneObj.doAfterSelectHooks(ctx, exec); err != nil {
		return zoneObj, err
	}

	return zoneObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Zone) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no zone provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(zoneColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	zoneInsertCacheMut.RLock()
	cache, cached := zoneInsertCache[key]
	zoneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			zoneAllColumns,
			zoneColumnsWithDefault,
			zoneColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(zoneType, zoneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(zoneType, zoneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"zone\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"zone\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into zone")
	}

	if !cached {
		zoneInsertCacheMut.Lock()
		zoneInsertCache[key] = cache
		zoneInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Zone.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Zone) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	zoneUpdateCacheMut.RLock()
	cache, cached := zoneUpdateCache[key]
	zoneUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			zoneAllColumns,
			zonePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update zone, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"zone\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, zonePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(zoneType, zoneMapping, append(wl, zonePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update zone row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for zone")
	}

	if !cached {
		zoneUpdateCacheMut.Lock()
		zoneUpdateCache[key] = cache
		zoneUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q zoneQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for zone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for zone")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ZoneSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), zonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"zone\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, zonePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in zone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all zone")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Zone) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no zone provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(zoneColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	zoneUpsertCacheMut.RLock()
	cache, cached := zoneUpsertCache[key]
	zoneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			zoneAllColumns,
			zoneColumnsWithDefault,
			zoneColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			zoneAllColumns,
			zonePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert zone, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(zonePrimaryKeyColumns))
			copy(conflict, zonePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"zone\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(zoneType, zoneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(zoneType, zoneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert zone")
	}

	if !cached {
		zoneUpsertCacheMut.Lock()
		zoneUpsertCache[key] = cache
		zoneUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Zone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Zone) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Zone provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), zonePrimaryKeyMapping)
	sql := "DELETE FROM \"zone\" WHERE \"zone_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from zone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for zone")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q zoneQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no zoneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from zone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for zone")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ZoneSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(zoneBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), zonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"zone\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, zonePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from zone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for zone")
	}

	if len(zoneAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Zone) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindZone(ctx, exec, o.ZoneID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ZoneSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ZoneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), zonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"zone\".* FROM \"zone\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, zonePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ZoneSlice")
	}

	*o = slice

	return nil
}

// ZoneExists checks if the Zone row exists.
func ZoneExists(ctx context.Context, exec boil.ContextExecutor, zoneID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"zone\" where \"zone_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, zoneID)
	}
	row := exec.QueryRowContext(ctx, sql, zoneID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if zone exists")
	}

	return exists, nil
}
