// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Orgs", testOrgs)
	t.Run("Policies", testPolicies)
	t.Run("Roles", testRoles)
	t.Run("Users", testUsers)
	t.Run("Zones", testZones)
}

func TestDelete(t *testing.T) {
	t.Run("Orgs", testOrgsDelete)
	t.Run("Policies", testPoliciesDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Users", testUsersDelete)
	t.Run("Zones", testZonesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Orgs", testOrgsQueryDeleteAll)
	t.Run("Policies", testPoliciesQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("Zones", testZonesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Orgs", testOrgsSliceDeleteAll)
	t.Run("Policies", testPoliciesSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("Zones", testZonesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Orgs", testOrgsExists)
	t.Run("Policies", testPoliciesExists)
	t.Run("Roles", testRolesExists)
	t.Run("Users", testUsersExists)
	t.Run("Zones", testZonesExists)
}

func TestFind(t *testing.T) {
	t.Run("Orgs", testOrgsFind)
	t.Run("Policies", testPoliciesFind)
	t.Run("Roles", testRolesFind)
	t.Run("Users", testUsersFind)
	t.Run("Zones", testZonesFind)
}

func TestBind(t *testing.T) {
	t.Run("Orgs", testOrgsBind)
	t.Run("Policies", testPoliciesBind)
	t.Run("Roles", testRolesBind)
	t.Run("Users", testUsersBind)
	t.Run("Zones", testZonesBind)
}

func TestOne(t *testing.T) {
	t.Run("Orgs", testOrgsOne)
	t.Run("Policies", testPoliciesOne)
	t.Run("Roles", testRolesOne)
	t.Run("Users", testUsersOne)
	t.Run("Zones", testZonesOne)
}

func TestAll(t *testing.T) {
	t.Run("Orgs", testOrgsAll)
	t.Run("Policies", testPoliciesAll)
	t.Run("Roles", testRolesAll)
	t.Run("Users", testUsersAll)
	t.Run("Zones", testZonesAll)
}

func TestCount(t *testing.T) {
	t.Run("Orgs", testOrgsCount)
	t.Run("Policies", testPoliciesCount)
	t.Run("Roles", testRolesCount)
	t.Run("Users", testUsersCount)
	t.Run("Zones", testZonesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Orgs", testOrgsHooks)
	t.Run("Policies", testPoliciesHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("Users", testUsersHooks)
	t.Run("Zones", testZonesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Orgs", testOrgsInsert)
	t.Run("Orgs", testOrgsInsertWhitelist)
	t.Run("Policies", testPoliciesInsert)
	t.Run("Policies", testPoliciesInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("Zones", testZonesInsert)
	t.Run("Zones", testZonesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("RoleToOrgUsingOrg", testRoleToOneOrgUsingOrg)
	t.Run("UserToOrgUsingOrg", testUserToOneOrgUsingOrg)
	t.Run("ZoneToOrgUsingOrg", testZoneToOneOrgUsingOrg)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("OrgToRoles", testOrgToManyRoles)
	t.Run("OrgToUsers", testOrgToManyUsers)
	t.Run("OrgToZones", testOrgToManyZones)
	t.Run("PolicyToRoles", testPolicyToManyRoles)
	t.Run("RoleToPolicies", testRoleToManyPolicies)
	t.Run("RoleToUsers", testRoleToManyUsers)
	t.Run("UserToRoles", testUserToManyRoles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("RoleToOrgUsingRoles", testRoleToOneSetOpOrgUsingOrg)
	t.Run("UserToOrgUsingUsers", testUserToOneSetOpOrgUsingOrg)
	t.Run("ZoneToOrgUsingZones", testZoneToOneSetOpOrgUsingOrg)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("RoleToOrgUsingRoles", testRoleToOneRemoveOpOrgUsingOrg)
	t.Run("UserToOrgUsingUsers", testUserToOneRemoveOpOrgUsingOrg)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("OrgToRoles", testOrgToManyAddOpRoles)
	t.Run("OrgToUsers", testOrgToManyAddOpUsers)
	t.Run("OrgToZones", testOrgToManyAddOpZones)
	t.Run("PolicyToRoles", testPolicyToManyAddOpRoles)
	t.Run("RoleToPolicies", testRoleToManyAddOpPolicies)
	t.Run("RoleToUsers", testRoleToManyAddOpUsers)
	t.Run("UserToRoles", testUserToManyAddOpRoles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("OrgToRoles", testOrgToManySetOpRoles)
	t.Run("OrgToUsers", testOrgToManySetOpUsers)
	t.Run("PolicyToRoles", testPolicyToManySetOpRoles)
	t.Run("RoleToPolicies", testRoleToManySetOpPolicies)
	t.Run("RoleToUsers", testRoleToManySetOpUsers)
	t.Run("UserToRoles", testUserToManySetOpRoles)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("OrgToRoles", testOrgToManyRemoveOpRoles)
	t.Run("OrgToUsers", testOrgToManyRemoveOpUsers)
	t.Run("PolicyToRoles", testPolicyToManyRemoveOpRoles)
	t.Run("RoleToPolicies", testRoleToManyRemoveOpPolicies)
	t.Run("RoleToUsers", testRoleToManyRemoveOpUsers)
	t.Run("UserToRoles", testUserToManyRemoveOpRoles)
}

func TestReload(t *testing.T) {
	t.Run("Orgs", testOrgsReload)
	t.Run("Policies", testPoliciesReload)
	t.Run("Roles", testRolesReload)
	t.Run("Users", testUsersReload)
	t.Run("Zones", testZonesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Orgs", testOrgsReloadAll)
	t.Run("Policies", testPoliciesReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("Zones", testZonesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Orgs", testOrgsSelect)
	t.Run("Policies", testPoliciesSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Users", testUsersSelect)
	t.Run("Zones", testZonesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Orgs", testOrgsUpdate)
	t.Run("Policies", testPoliciesUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("Zones", testZonesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Orgs", testOrgsSliceUpdateAll)
	t.Run("Policies", testPoliciesSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("Zones", testZonesSliceUpdateAll)
}
