// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Condition is an object representing the database table.
type Condition struct {
	ConditionID int    `boil:"condition_id" json:"condition_id" toml:"condition_id" yaml:"condition_id"`
	Type        string `boil:"type" json:"type" toml:"type" yaml:"type"`
	Value       string `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *conditionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L conditionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConditionColumns = struct {
	ConditionID string
	Type        string
	Value       string
}{
	ConditionID: "condition_id",
	Type:        "type",
	Value:       "value",
}

var ConditionTableColumns = struct {
	ConditionID string
	Type        string
	Value       string
}{
	ConditionID: "condition.condition_id",
	Type:        "condition.type",
	Value:       "condition.value",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ConditionWhere = struct {
	ConditionID whereHelperint
	Type        whereHelperstring
	Value       whereHelperstring
}{
	ConditionID: whereHelperint{field: "\"condition\".\"condition_id\""},
	Type:        whereHelperstring{field: "\"condition\".\"type\""},
	Value:       whereHelperstring{field: "\"condition\".\"value\""},
}

// ConditionRels is where relationship names are stored.
var ConditionRels = struct {
	Policies string
}{
	Policies: "Policies",
}

// conditionR is where relationships are stored.
type conditionR struct {
	Policies PolicySlice `boil:"Policies" json:"Policies" toml:"Policies" yaml:"Policies"`
}

// NewStruct creates a new relationship struct
func (*conditionR) NewStruct() *conditionR {
	return &conditionR{}
}

// conditionL is where Load methods for each relationship are stored.
type conditionL struct{}

var (
	conditionAllColumns            = []string{"condition_id", "type", "value"}
	conditionColumnsWithoutDefault = []string{"type", "value"}
	conditionColumnsWithDefault    = []string{"condition_id"}
	conditionPrimaryKeyColumns     = []string{"condition_id"}
)

type (
	// ConditionSlice is an alias for a slice of pointers to Condition.
	// This should almost always be used instead of []Condition.
	ConditionSlice []*Condition
	// ConditionHook is the signature for custom Condition hook methods
	ConditionHook func(context.Context, boil.ContextExecutor, *Condition) error

	conditionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	conditionType                 = reflect.TypeOf(&Condition{})
	conditionMapping              = queries.MakeStructMapping(conditionType)
	conditionPrimaryKeyMapping, _ = queries.BindMapping(conditionType, conditionMapping, conditionPrimaryKeyColumns)
	conditionInsertCacheMut       sync.RWMutex
	conditionInsertCache          = make(map[string]insertCache)
	conditionUpdateCacheMut       sync.RWMutex
	conditionUpdateCache          = make(map[string]updateCache)
	conditionUpsertCacheMut       sync.RWMutex
	conditionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var conditionBeforeInsertHooks []ConditionHook
var conditionBeforeUpdateHooks []ConditionHook
var conditionBeforeDeleteHooks []ConditionHook
var conditionBeforeUpsertHooks []ConditionHook

var conditionAfterInsertHooks []ConditionHook
var conditionAfterSelectHooks []ConditionHook
var conditionAfterUpdateHooks []ConditionHook
var conditionAfterDeleteHooks []ConditionHook
var conditionAfterUpsertHooks []ConditionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Condition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conditionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Condition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conditionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Condition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conditionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Condition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conditionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Condition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conditionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Condition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conditionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Condition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conditionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Condition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conditionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Condition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conditionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConditionHook registers your hook function for all future operations.
func AddConditionHook(hookPoint boil.HookPoint, conditionHook ConditionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		conditionBeforeInsertHooks = append(conditionBeforeInsertHooks, conditionHook)
	case boil.BeforeUpdateHook:
		conditionBeforeUpdateHooks = append(conditionBeforeUpdateHooks, conditionHook)
	case boil.BeforeDeleteHook:
		conditionBeforeDeleteHooks = append(conditionBeforeDeleteHooks, conditionHook)
	case boil.BeforeUpsertHook:
		conditionBeforeUpsertHooks = append(conditionBeforeUpsertHooks, conditionHook)
	case boil.AfterInsertHook:
		conditionAfterInsertHooks = append(conditionAfterInsertHooks, conditionHook)
	case boil.AfterSelectHook:
		conditionAfterSelectHooks = append(conditionAfterSelectHooks, conditionHook)
	case boil.AfterUpdateHook:
		conditionAfterUpdateHooks = append(conditionAfterUpdateHooks, conditionHook)
	case boil.AfterDeleteHook:
		conditionAfterDeleteHooks = append(conditionAfterDeleteHooks, conditionHook)
	case boil.AfterUpsertHook:
		conditionAfterUpsertHooks = append(conditionAfterUpsertHooks, conditionHook)
	}
}

// One returns a single condition record from the query.
func (q conditionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Condition, error) {
	o := &Condition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for condition")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Condition records from the query.
func (q conditionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConditionSlice, error) {
	var o []*Condition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Condition slice")
	}

	if len(conditionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Condition records in the query.
func (q conditionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count condition rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q conditionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if condition exists")
	}

	return count > 0, nil
}

// Policies retrieves all the policy's Policies with an executor.
func (o *Condition) Policies(mods ...qm.QueryMod) policyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"condition_policies\" on \"policy\".\"policy_id\" = \"condition_policies\".\"policy_id\""),
		qm.Where("\"condition_policies\".\"condition_id\"=?", o.ConditionID),
	)

	query := Policies(queryMods...)
	queries.SetFrom(query.Query, "\"policy\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"policy\".*"})
	}

	return query
}

// LoadPolicies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (conditionL) LoadPolicies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCondition interface{}, mods queries.Applicator) error {
	var slice []*Condition
	var object *Condition

	if singular {
		object = maybeCondition.(*Condition)
	} else {
		slice = *maybeCondition.(*[]*Condition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &conditionR{}
		}
		args = append(args, object.ConditionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &conditionR{}
			}

			for _, a := range args {
				if a == obj.ConditionID {
					continue Outer
				}
			}

			args = append(args, obj.ConditionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"policy\".policy_id, \"policy\".name, \"policy\".effect, \"policy\".actions, \"policy\".resource_name, \"a\".\"condition_id\""),
		qm.From("\"policy\""),
		qm.InnerJoin("\"condition_policies\" as \"a\" on \"policy\".\"policy_id\" = \"a\".\"policy_id\""),
		qm.WhereIn("\"a\".\"condition_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load policy")
	}

	var resultSlice []*Policy

	var localJoinCols []int
	for results.Next() {
		one := new(Policy)
		var localJoinCol int

		err = results.Scan(&one.PolicyID, &one.Name, &one.Effect, &one.Actions, &one.ResourceName, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for policy")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice policy")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on policy")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for policy")
	}

	if len(policyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Policies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &policyR{}
			}
			foreign.R.Conditions = append(foreign.R.Conditions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ConditionID == localJoinCol {
				local.R.Policies = append(local.R.Policies, foreign)
				if foreign.R == nil {
					foreign.R = &policyR{}
				}
				foreign.R.Conditions = append(foreign.R.Conditions, local)
				break
			}
		}
	}

	return nil
}

// AddPolicies adds the given related objects to the existing relationships
// of the condition, optionally inserting them as new records.
// Appends related to o.R.Policies.
// Sets related.R.Conditions appropriately.
func (o *Condition) AddPolicies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Policy) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"condition_policies\" (\"condition_id\", \"policy_id\") values ($1, $2)"
		values := []interface{}{o.ConditionID, rel.PolicyID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &conditionR{
			Policies: related,
		}
	} else {
		o.R.Policies = append(o.R.Policies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &policyR{
				Conditions: ConditionSlice{o},
			}
		} else {
			rel.R.Conditions = append(rel.R.Conditions, o)
		}
	}
	return nil
}

// SetPolicies removes all previously related items of the
// condition replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Conditions's Policies accordingly.
// Replaces o.R.Policies with related.
// Sets related.R.Conditions's Policies accordingly.
func (o *Condition) SetPolicies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Policy) error {
	query := "delete from \"condition_policies\" where \"condition_id\" = $1"
	values := []interface{}{o.ConditionID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removePoliciesFromConditionsSlice(o, related)
	if o.R != nil {
		o.R.Policies = nil
	}
	return o.AddPolicies(ctx, exec, insert, related...)
}

// RemovePolicies relationships from objects passed in.
// Removes related items from R.Policies (uses pointer comparison, removal does not keep order)
// Sets related.R.Conditions.
func (o *Condition) RemovePolicies(ctx context.Context, exec boil.ContextExecutor, related ...*Policy) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"condition_policies\" where \"condition_id\" = $1 and \"policy_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ConditionID}
	for _, rel := range related {
		values = append(values, rel.PolicyID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removePoliciesFromConditionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Policies {
			if rel != ri {
				continue
			}

			ln := len(o.R.Policies)
			if ln > 1 && i < ln-1 {
				o.R.Policies[i] = o.R.Policies[ln-1]
			}
			o.R.Policies = o.R.Policies[:ln-1]
			break
		}
	}

	return nil
}

func removePoliciesFromConditionsSlice(o *Condition, related []*Policy) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Conditions {
			if o.ConditionID != ri.ConditionID {
				continue
			}

			ln := len(rel.R.Conditions)
			if ln > 1 && i < ln-1 {
				rel.R.Conditions[i] = rel.R.Conditions[ln-1]
			}
			rel.R.Conditions = rel.R.Conditions[:ln-1]
			break
		}
	}
}

// Conditions retrieves all the records using an executor.
func Conditions(mods ...qm.QueryMod) conditionQuery {
	mods = append(mods, qm.From("\"condition\""))
	return conditionQuery{NewQuery(mods...)}
}

// FindCondition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCondition(ctx context.Context, exec boil.ContextExecutor, conditionID int, selectCols ...string) (*Condition, error) {
	conditionObj := &Condition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"condition\" where \"condition_id\"=$1", sel,
	)

	q := queries.Raw(query, conditionID)

	err := q.Bind(ctx, exec, conditionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from condition")
	}

	if err = conditionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return conditionObj, err
	}

	return conditionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Condition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no condition provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(conditionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	conditionInsertCacheMut.RLock()
	cache, cached := conditionInsertCache[key]
	conditionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			conditionAllColumns,
			conditionColumnsWithDefault,
			conditionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(conditionType, conditionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(conditionType, conditionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"condition\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"condition\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into condition")
	}

	if !cached {
		conditionInsertCacheMut.Lock()
		conditionInsertCache[key] = cache
		conditionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Condition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Condition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	conditionUpdateCacheMut.RLock()
	cache, cached := conditionUpdateCache[key]
	conditionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			conditionAllColumns,
			conditionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update condition, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"condition\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, conditionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(conditionType, conditionMapping, append(wl, conditionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update condition row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for condition")
	}

	if !cached {
		conditionUpdateCacheMut.Lock()
		conditionUpdateCache[key] = cache
		conditionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q conditionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for condition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for condition")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConditionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), conditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"condition\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, conditionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in condition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all condition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Condition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no condition provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(conditionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	conditionUpsertCacheMut.RLock()
	cache, cached := conditionUpsertCache[key]
	conditionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			conditionAllColumns,
			conditionColumnsWithDefault,
			conditionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			conditionAllColumns,
			conditionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert condition, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(conditionPrimaryKeyColumns))
			copy(conflict, conditionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"condition\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(conditionType, conditionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(conditionType, conditionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert condition")
	}

	if !cached {
		conditionUpsertCacheMut.Lock()
		conditionUpsertCache[key] = cache
		conditionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Condition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Condition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Condition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), conditionPrimaryKeyMapping)
	sql := "DELETE FROM \"condition\" WHERE \"condition_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from condition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for condition")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q conditionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no conditionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from condition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for condition")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConditionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(conditionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), conditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"condition\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, conditionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from condition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for condition")
	}

	if len(conditionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Condition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCondition(ctx, exec, o.ConditionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConditionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConditionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), conditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"condition\".* FROM \"condition\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, conditionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConditionSlice")
	}

	*o = slice

	return nil
}

// ConditionExists checks if the Condition row exists.
func ConditionExists(ctx context.Context, exec boil.ContextExecutor, conditionID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"condition\" where \"condition_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, conditionID)
	}
	row := exec.QueryRowContext(ctx, sql, conditionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if condition exists")
	}

	return exists, nil
}
